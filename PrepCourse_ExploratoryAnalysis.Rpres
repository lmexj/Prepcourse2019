Exploratory Data Analysis
========================================================
author: Jing Xu (Applied Bioinformatics (B330), DKFZ)
date: 2019-03-08
autosize: true
width: 1440
height: 900

```{r setup, include=FALSE, message=FALSE, warning=FALSE}
library(plyr)
library(dplyr)
library(corrplot)
```

Outline
========================================================
- Reading and exporting data
- Cleaning data
- Learn to use **dplyr** package
- Descriptive statistics
- Basic plotting functions


Before importing data ...
========================================================
- In regular R file, you may need to setup your working directory by `setwd("YourFilePath")`, note that you need to use __forward slash ("/")__ instead of back slash, the file path should be inside the quotation mark
- Check if your working directory is correct by `getwd()`
- Check which files or folders are in the working directory by `list.files()`
- Load necessary packages:
    + if preexisting: `library("package name")`
    + if new (depends on the resources): 
        from CRAN R package repository (main): `install.packages("package name")` or simply click "Install" button in the lower right window in R studio
    + if outdated (CRAN R package): update your package by `update.packages(package name)` or click "update" button


R packages resources
========================================================
* [The CRAN package repository](https://cran.r-project.org/web/packages/
): currently 13832 packages available
* [Bioconductor](https://www.bioconductor.org/): packages for high-throughput genomic data, currently 1649 packages

```{r Bioconductor, eval=FALSE, message=FALSE}
if (!requireNamespace("BiocManager"))
    install.packages("BiocManager")
BiocManager::install("GenomicFeatures")
```

* Github repo: mostly unoffcial packages, under development or not intended to publish
```{r Github install, eval=FALSE, message=FALSE}
install.packages("devtools")
devtools::install_github("developername/packagename")
```


Getting data into R
========================================================
There are many ways to import data into R depending on the data format, Sometimes you need to download a specific package for reading data. Here are some commonly used functions. 

        Functions        |        File type        |  required Package
    ---------------------|-------------------------|--------------------
      `read.csv()`       |  comma separated files  |     basic
      `read.table()`     |  csv, txt, semicolon    |     basic
      `read.delim()`     |  other delimited Files  |     basic
      `readHTMLTable()`  |  HTML file (URL)        |   RCurl, XML
      `read.xls()`       |  Excel xls sheets       |     gdata 
      `read.xlsx()`      |  Excel xlsx sheets      |     openxlsx 
        
- However, things may not go as smooth as you think ... sometimes it can be very frastrating for not being able to read some xlsx sheets into R, especially when you have dirty data. 


Inspect your data 
========================================================
**It's extremely important to work with clean data!** Excel sheets always use free text boxes which may contain lots of garbage, you cannot even read the mess into R! Sometimes you can get data into R, but 

- Does it follow "one column one data type" rules? 
- In each column, do call the formats look alike? Can they be separate by regular expression?
- In each column, are all the values in correct format as required? (e.g. character format, date format, number range ...) Identify the wrong ones and try to fix them.
- Convert missing values to NA


Some examples of bad data...
========================================================
1. A column named "cell number"...
```{r, echo=FALSE}
cellnumber = c(1970000, 1.18E07, "9.23E04 cells")
cellnumber 
as.numeric(cellnumber)
```

```{r, message=FALSE, warnings=FALSE}
# which value is not a number?
suppressWarnings(
    cellnumber[which(is.na(as.numeric(cellnumber)))]
    )
# which values are numbers?
suppressWarnings(
    cellnumber[which(!is.na(as.numeric(cellnumber)))]
    )
```


=======================================================
How to fix this with R?
```{r}
cellnumber[which(is.na(as.numeric(cellnumber)))] <- "9.23E04"
cellnumber <- as.numeric(cellnumber)
cellnumber
```

But what if there are many values like this?
```{r message=FALSE, eval=FALSE}
ind <- which(is.na(as.numeric(cellnumber)))

# method 1. string split
as.numeric(unlist(strsplit(as.character(cellnumber[ind]), " "))[1])

# method 2. string split by sapply
as.numeric(sapply(strsplit(as.character(cellnumber[ind]), " "), "[[", 1))

```
Pandoc bug... cannot display the results correctly, you can try to run it in R console.


Load build-in data sets
========================================================
Build-in data sets and external data packages are very good sources to practice R coding. You can either call them directly, or use `data()` function to get them into the console.

Some famous datasets: e.g. **iris**, **mtcars**
- The **Iris** flower data set is a multivariate data set introduced by the British statistician and biologist Ronald Fisher in 1936. 
- The **mtcars** data set (Motor trend car road test) was extracted from the 1974 Motor Trend US magazine, and comprises fuel consumption and 10 aspects of automobile design and performance for 32 automobiles (1973 to 1974 models).


The Iris flower data
========================================================
- 50 samples; 3 species ( _Iris setosa_ , _Iris virginica_ and _Iris versicolor_); 4 features: the length and the width of the sepals and petals, in centimeters. 
- Based on the combination of these four features, Fisher developed a linear discriminant model to distinguish the species from each other. 

```{r}
str(iris)

```


Get to know 'dplyr' for data frames
========================================================
* Selecting columns with long variables names or subset data based on multiple columns can produce lengthy code, which is very difficult to read. The 'dplyr' package provides a handful of useful functions for easy data frame manipulation:

    - `filter()` to select cases based on their values.
    - `arrange()` to reorder the cases.
    - `select()` and `rename()` to select variables based on their names.
    - `mutate()` and `transmute()` to add new variables that are functions of existing variables.
    - `summarise()` to condense multiple values to a single value.
    - `group_by()`to group data based on variable(s)

* You can pipe your code by `%>%`


Select and filter 
========================================================
```{r}
names(iris)
iris[iris$Sepal.Width>4,c("Species", "Sepal.Width", "Sepal.Length")]
```

```{r}
# dplyr package is loaded in setup chunk
iris %>% select(Species, Sepal.Width, Sepal.Length) %>% filter(Sepal.Width>4)
```


Mutate and arrange
========================================================
```{r}
Data <- iris %>% 
        mutate(height= sample(seq(30.0, 50.0, by=0.2), nrow(iris), replace = T )) %>%
        filter(height > 40) %>%        
        dplyr::select(Species, Sepal.Length, Sepal.Width, height) %>% 
        arrange(height)

head(Data) 
```



Data distribution
========================================================
Overview of total distribution by `summary()`
```{r, echo=FALSE}
summary(iris)
```


========================================================
```{r fig.height= 8,fig.width=14, fig.align="center"}
par(mfrow =c(1,2))
graphics::boxplot(iris[,names(iris) != "Species"], main="Boxplot", xlab="measurement", ylab="values")
graphics::boxplot(iris[,names(iris) != "Species"], 
        main="Boxplot", xlab="measurement", ylab="values",
        col=c("red", "blue", "green", "yellow") )

```



Calculation based on a variable
========================================================
* Use `tapply(vector, index, function)`
```{r }
tapply(iris$Sepal.Length, iris$Species, mean)
tapply(iris$Sepal.Width, iris$Species, mean)
tapply(iris$Petal.Length, iris$Species, mean)
tapply(iris$Sepal.Width, iris$Species, mean)

```

========================================================
* Use `group_by` and `summarise_at` from `dplyr` package
```{r}
iris %>% 
    group_by(Species) %>%
    summarise(mean=mean(Sepal.Length))

```


========================================================
```{r fig.height= 8,fig.width=14, fig.align="center"}
par(mfrow =c(1,2))
graphics::boxplot(iris$Sepal.Width ~ as.factor(iris$Species), 
                  col=c("red", "blue", "green")) 
graphics::boxplot(iris$Sepal.Length ~ as.factor(iris$Species), 
                  col=c("red", "blue", "green")) 
```


Correlation
========================================================
Is there any correlation between these variables?
It's a good idea to plot your data first!
```{r, fig.height= 8,fig.width=8, fig.align="center"}
pairs(iris)
```


Test correlations
========================================================
```{r}
cor.test(iris$Petal.Length, iris$Sepal.Width, method="spearman")
cor.test(iris$Petal.Length, iris$Sepal.Length, method = "spearman")
```

========================================================
You may also check paired correlation for all variables
```{r}
M <- suppressMessages(stats::cor(iris[1:4]));
M
```

========================================================
Use `corrplot` package for visulization
```{r, fig.height= 12,fig.width=12, fig.align="center"}
par(mfrow =c(1,2))
corrplot(M)
corrplot(M, method = "number")

```


========================================================
# $\color{red}{\text{Congrats! You finish this session!}}$